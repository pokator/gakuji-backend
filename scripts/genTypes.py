import json
from typing import List, Dict, Optional
from scripts.typeGenHelpers.typeMappings import (
    type_mapping,
)  # Ensure this import matches your file and variable name
import os
from scripts.typeGenHelpers.genSchema import create_json

# Function to generate field line
def generate_field_line(column_name: str, data_type: str, is_nullable: str) -> str:
    """
    Generate a field line in the Pydantic model class definition, making the field optional if is_nullable is 'YES'.
    """
    # Use the data_type to get the corresponding Python type from type_mapping
    python_type = type_mapping.get(data_type, "Any")  # Default to 'Any' if not found

    # Make the field optional if is_nullable is 'YES'
    if is_nullable == "YES":
        python_type = f"Optional[{python_type}] = None"

    return f"    {column_name}: {python_type}"


# Function to generate models
# Function to generate models
def generate_models(schema: List[Dict[str, str]]) -> str:
    """
    Generate Pydantic model classes from the schema definition, including nullable fields.
    """
    models = {}
    for entry in schema:
        table_name = entry.get("table_name", "Unknown")
        column_name = entry.get("column_name", "unknown_column")
        data_type = entry.get("udt_name", "text")  # Use 'udt_name' for the type
        is_nullable = entry.get("is_nullable", "NO")  # Extract is_nullable attribute

        # Append the field definition, considering nullability
        field_line = generate_field_line(column_name, data_type, is_nullable)
        if table_name not in models:
            models[table_name] = [field_line]
        else:
            models[table_name].append(field_line)

    # Construct model classes string, including necessary imports
    models_str = "from pydantic import BaseModel, UUID4\nfrom datetime import datetime, date\nfrom typing import List, Dict, Any, Optional\nfrom decimal import Decimal\nfrom ipaddress import IPv4Address, IPv6Address\nfrom datetime import timedelta\n\n"
    for model_name, fields in models.items():
        fields_str = "\n".join(fields)
        models_str += f"""
class {model_name}(BaseModel):
{fields_str}
"""
    return models_str


# Assuming schema.json and this script are in the same directory
script_dir = os.path.dirname(os.path.realpath(__file__))
schema_file_path = os.path.join(script_dir, "./typeGenHelpers/schema.json")
create_json()


# Load the schema from the file
with open(schema_file_path) as f:
    schema = json.load(f)

# Generate Pydantic models
autogen_comment = "# THIS FILE WAS AUTOGENERATED. DO NOT EDIT.\n\n"
models_str = generate_models(schema)
models_str_with_comment = autogen_comment + models_str

# Write the generated models to a file located at '../app/dbmodels.py'
output_file_path = os.path.join(script_dir, "../app/dbmodels.py")
with open(output_file_path, "w") as f:
    f.write(models_str_with_comment)
    print(f"Pydantic models have been written to {output_file_path}")
